@implements IDisposable
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@using System.Security.Claims

<MudNavMenu Bordered="true" Color="Color.Primary">
    <AuthorizeView>
        <Authorized>
            @if (user != null)
            {
                <MudNavLink Href="Account/Manage" Match="NavLinkMatch.Prefix" IconColor="Color.Primary"  Icon="@Icons.Material.TwoTone.Person">@user.Identity?.Name</MudNavLink>

                @if (isAdmin)
                {
                    <MudNavLink Href="" Match="NavLinkMatch.All" IconColor="Color.Primary" Icon="@Icons.Material.TwoTone.Home">Home</MudNavLink>
                    <MudNavGroup Title="User Management" IconColor="Color.Primary" Icon="@Icons.Material.TwoTone.SupervisorAccount" Expanded="true">
                        <MudNavLink Href="/Users" Match="NavLinkMatch.Prefix" IconColor="Color.Primary" Icon="@Icons.Material.TwoTone.SupervisedUserCircle">Users</MudNavLink>
                        <MudNavLink Href="/Roles" Match="NavLinkMatch.Prefix" IconColor="Color.Primary" Icon="@Icons.Material.TwoTone.AdminPanelSettings">Roles</MudNavLink>
                    </MudNavGroup>
                    <MudNavLink Href="/Teams" Match="NavLinkMatch.All" IconColor="Color.Primary" Icon="@Icons.Material.TwoTone.Groups">Teams</MudNavLink>
                    <MudNavLink Href="/Announcements" Match="NavLinkMatch.All" IconColor="Color.Primary" Icon="@Icons.Material.TwoTone.Campaign">Announcements</MudNavLink>
                    <MudNavLink Href="/Practices" Match="NavLinkMatch.All" IconColor="Color.Primary" Icon="@Icons.Material.TwoTone.MedicalServices">Practices</MudNavLink>
                    <MudNavLink Href="/TimeOffRequests" Match="NavLinkMatch.All" IconColor="Color.Primary" Icon="@Icons.Material.TwoTone.Event">Time Off Requests</MudNavLink>

                }

                @if (isAdmin || isDoctor)
                {
                    <MudNavLink Href="/practicedashboard" Match="NavLinkMatch.All" IconColor="Color.Primary" Icon="@Icons.Material.TwoTone.HealthAndSafety">Practice Dashboard</MudNavLink>
                }

                <form action="Account/Logout" method="post">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                    <button type="submit" class="mud-nav-link mud-ripple">
                        <MudIcon Icon="@Icons.Material.TwoTone.Logout" Color="Color.Error" Class="mr-3"></MudIcon> Logout
                    </button>
                </form>
            }
        </Authorized>

        <NotAuthorized>
            <RedirectToLogin />
            <MudNavLink Href="Account/Login" Match="NavLinkMatch.Prefix" IconColor="Color.Primary" Icon="@Icons.Material.TwoTone.Password">Login</MudNavLink>
        </NotAuthorized>
    </AuthorizeView>
</MudNavMenu>

@code {
    private string? currentUrl;
    private ClaimsPrincipal? user;
    private bool isAdmin = false;
    private bool isDoctor = false;
    private bool redirected = false;


    protected override async Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;

        // Fetch user and roles
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var roles = user.FindAll(ClaimTypes.Role).Select(c => c.Value).ToList();
            isAdmin = roles.Contains(AppConsts.UserConsts.AdminRole);
            isDoctor = roles.Contains(AppConsts.UserConsts.DoctorRole);
        }

        StateHasChanged();
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender && isDoctor && !currentUrl.Contains("/DDD"))
    //     {
    //         NavigationManager.NavigateTo("/DDD", forceLoad: true);
    //     }
    // }


    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
