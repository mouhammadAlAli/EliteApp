@* @inject ApplicationDbContext _context *@
@* @inject ICurrentUserService CurrentUserService; *@

<MudGrid Justify="Justify.SpaceBetween" Class="mt-1">
    <MudItem>
        <MudGrid Justify="Justify.FlexStart">
            <MudItem>
                <MudText Typo="Typo.body2">This Week</MudText>
                <MudText Typo="Typo.body2">@($"{WeekWorkingHours.Hours}h {WeekWorkingHours.Minutes}m")</MudText>
            </MudItem>
            <MudItem>
                <MudText Typo="Typo.body2">Pay Perioud</MudText>
                <MudText Typo="Typo.body2">@($"{WeekWorkingHours.Hours}h {WeekWorkingHours.Minutes}m")</MudText>
            </MudItem>
        </MudGrid>
    </MudItem>
    <MudItem>
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" >My Time Sheet</MudButton>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public TimeSpan WeekWorkingHours { get; set; } = TimeSpan.Zero;
    // protected override async Task OnInitializedAsync()
    // {
    //     var userId = await CurrentUserService.GetCurrentUserIdAsync();
    //     var startOfWeek = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek); 
    //     var endOfWeek = startOfWeek.AddDays(7).AddSeconds(-1);

    //     var periodsThisWeek = await _context.UserWorkingPeriods
    //         .Where(wp => wp.Date >= startOfWeek && wp.Date <= endOfWeek && wp.UserId == userId)
    //         .OrderBy(wp => wp.Date)
    //         .ToListAsync();
    //     WeekWorkingHours = TimeSpan.Zero;
    //     foreach (var period in periodsThisWeek)
    //     {
    //         if (period.To.HasValue)
    //             WeekWorkingHours += period.To.Value - period.From;
    //     }
    // }
}
