@inject IDialogService DialogService
@inject ApplicationDbContext _context

<MudCard Square="true" Outlined="true" Style="height: 100%">
    <MudCardHeader>
        <CardHeaderContent>
            <MudGrid Justify="Justify.FlexStart">
                <MudItem>
                    <MudIcon Color="Color.Primary" Icon="@Icons.Material.Outlined.AccessAlarm" />
                </MudItem>
                <MudItem>
                    <MudText Color="Color.Primary">My Time</MudText>
                </MudItem>
            </MudGrid>
            <MudDivider Style="width: 100%;" />
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        @if (IsLoading)
        {
            <MudProgressCircular Color="Color.Default" Indeterminate="true" />
        }else{
            <MudGrid Justify="Justify.Center">
                <MudItem>
                    <MudText>@isClickedInTitle</MudText>
                </MudItem>
            </MudGrid>
            <MudGrid Justify="Justify.Center">
                <MudItem>
                    <MudGrid>
                        <MudItem>
                            <MudText Typo="Typo.h4" Color="@WorkingHourDisplayColor">@WorkingHoursTitle</MudText>
                        </MudItem>
                        @if (IsClockedIn)
                        {
                            <MudItem>
                                <MudIcon Class="mt-2" Icon="@Icons.Material.Outlined.Timer" Color="@WorkingHourDisplayColor" Size="Size.Large"></MudIcon>
                            </MudItem>
                        }
                    </MudGrid>
                    <MudText Typo="Typo.body2">@LastClock</MudText>
                </MudItem>
            </MudGrid>
            <div class="d-flex justify-center">
                <MudButton OnClick="Submit" StartIcon="@StartIcon" Variant="Variant.Filled" Color="Color.Primary" Class="ma-3" FullWidth="true">
                    @ButtonString
                </MudButton>
            </div>
            <MudText Class="ma-1" Typo="Typo.body2">@(ClockedInTime.HasValue ? $"Today -> {WorkingHoursAllDay.Hours}h {WorkingHoursAllDay.Minutes}m" : "")</MudText>
            <MudText Class="ma-1" Typo="Typo.body2">@(ClockedInTime.HasValue ? $"{ClockedInTime.Humanize()} - {(ClockedOutTime.HasValue ? ClockedOutTime.Humanize() : "Now")} > {WorkingHoursLastSession.Hours}h {WorkingHoursLastSession.Minutes}m" : "")</MudText>
            <MudLink @onclick="OpenDialogAsync" Class="ma-1" Typo="Typo.body2">+ Add Time Entry</MudLink>
            <MudSpacer />
            <MudDivider />
            <WorkingHoursPerWeek WeekWorkingHours="@WeekWorkingHours" />
        }   
    </MudCardContent>
</MudCard>
@code {
    [Parameter]
    public UserWorkingPeriod CurrentWorkingPeriod { get; set; }
    [Parameter]
    public List<UserWorkingPeriod> PeriodsThisWeek { get; set; }
    [Parameter]
    public int UserId { get; set; }

    private DateTime? ClockedInTime;
    private DateTime? ClockedOutTime;
    private bool IsClockedIn;
    private TimeSpan WorkingHoursAllDay;
    private TimeSpan WeekWorkingHours;
    private System.Threading.Timer? _timer;
    private TimeSpan ElapsedTime = TimeSpan.Zero;
    private string isClickedInTitle => IsClockedIn ? "Clocked In" : "Not Clocked In";
    private string WorkingHoursTitle => IsClockedIn ? $"{WorkingHoursLastSession.Hours}h {WorkingHoursLastSession.Minutes}m" : "No Active Session";
    private TimeSpan WorkingHoursLastSession => IsClockedIn && ClockedInTime.HasValue
       ? DateTime.UtcNow - ClockedInTime.Value
       : (ClockedOutTime.HasValue && ClockedInTime.HasValue ? ClockedOutTime.Value - ClockedInTime.Value : TimeSpan.Zero);
    private Color WorkingHourDisplayColor => IsClockedIn ? Color.Success : Color.Primary;
    private string ButtonString => IsClockedIn ? "Clock Out" : "Clock In";
    private string StartIcon => IsClockedIn ? Icons.Material.Outlined.TimerOff : Icons.Material.Outlined.Timer;
    private string LastClock => IsClockedIn ? $"Clocked In: {ClockedInTime.Humanize()}" : $"Clocked Out: {ClockedOutTime.Humanize()}";
    private bool IsLoading = true;
    protected override async Task OnParametersSetAsync()
    {
        try
        {
            WeekWorkingHours = TimeSpan.Zero;
            WorkingHoursAllDay = TimeSpan.Zero;
            var today = DateTime.UtcNow.Date;
            if (CurrentWorkingPeriod == null)
            {
                IsClockedIn = false;
            }
            else if (CurrentWorkingPeriod.To.HasValue)
            {
                IsClockedIn = false;
                ClockedOutTime = CurrentWorkingPeriod.To;
                ClockedInTime = CurrentWorkingPeriod.From;
            }
            else
            {
                IsClockedIn = true;
                ClockedInTime = CurrentWorkingPeriod.From;

                if (ClockedInTime.HasValue)
                {
                    ElapsedTime = DateTime.UtcNow - ClockedInTime.Value;
                    StartTimer();
                }
            }
            if(PeriodsThisWeek != null)
            {
                foreach (var period in PeriodsThisWeek)
                {
                    if (period.To.HasValue)
                    {
                        var duration = period.To.Value - period.From;
                        WeekWorkingHours += duration;

                        if (period.Date.Date == today)
                            WorkingHoursAllDay += duration;
                    }
                }
            }
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task Submit()
    {
        if (IsClockedIn)
        {
            ClockedOutTime = DateTime.UtcNow;
            IsClockedIn = false;


            if (CurrentWorkingPeriod != null)
            {
                CurrentWorkingPeriod.To = ClockedOutTime;
                _context.UserWorkingPeriods.Update(CurrentWorkingPeriod);
                await _context.SaveChangesAsync();
            }
            StopTimer();
        }
        else
        {
            ClockedInTime = DateTime.UtcNow;
            ClockedOutTime = null;
            IsClockedIn = true;

            CurrentWorkingPeriod = new UserWorkingPeriod
                {
                    UserId = UserId,
                    Date = DateTime.UtcNow.Date,
                    From = ClockedInTime.Value,
                    IsFromEntry = false
                };

            await _context.UserWorkingPeriods.AddAsync(CurrentWorkingPeriod);
            await _context.SaveChangesAsync();
            StartTimer();
        }
        StateHasChanged();
    }

    private void StartTimer()
    {
        StopTimer(); // Ensure no old timers are running

        _timer = new System.Threading.Timer(async _ =>
        {
            if (IsClockedIn && ClockedInTime.HasValue)
            {
                ElapsedTime = DateTime.UtcNow - ClockedInTime.Value;
                if (_timer != null)
                {
                    await InvokeAsync(StateHasChanged);
                }
            }
        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(5));
    }

    private void StopTimer()
    {
        _timer?.Change(Timeout.Infinite, Timeout.Infinite); 
        _timer?.Dispose();
        _timer = null;
    }


    private async Task OpenDialogAsync()
    {
        try
        {
            
            var parameters = new DialogParameters
        {
            { "UserId", UserId } 
        };

            
            var options = new DialogOptions
                {
                    CloseOnEscapeKey = true,
                    FullWidth = true,
                    CloseButton = true,
                    BackdropClick = false
                };

            var dialog = await DialogService.ShowAsync<AddTimeEntryDialog>("Enter Time", parameters, options);

            var result = await dialog.Result;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred: {ex.Message}");
        }
    }
}
