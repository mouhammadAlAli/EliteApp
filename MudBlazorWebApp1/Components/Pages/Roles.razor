@page "/Roles"
@inject RoleManager<Role> RoleManager
@inject IDialogService Dialog
@inject IUnitOfWork UnitOfWork
@attribute [Authorize(Roles = AppConsts.UserConsts.AdminRole)]

<PageTitle>Roles</PageTitle>

<MudTable ServerData="ServerReload" Dense="true" Hover="true" Bordered="false" @ref=table>
    <ToolBarContent>
        <MudText Typo="Typo.h6">Roles</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudSpacer />
        <MudFab OnClick="@(() => OpenDialogAsync())" Label="New Role" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Surface" IconSize="Size.Large" Size="Size.Medium" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>IsActive</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="IsActive">
            <MudSwitch T="bool" Value="@context.IsActive" Color="Color.Success" UncheckedColor="Color.Error"
                       ValueChanged="@(async value => await SwitchActivation(context, value))" />
        </MudTd>
        <MudTd DataLabel="Actions">
            <MudToolBar>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" OnClick="@(() => OpenDialogAsync(context))" />
            </MudToolBar>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>




@code {
    private string searchString = "";
    private MudTable<Role> table;
    private async Task<TableData<Role>> ServerReload(TableState state, CancellationToken token)
    {
        var roleQuery = RoleManager.Roles.AsQueryable();

        if (!string.IsNullOrWhiteSpace(searchString))
        {
            var s = searchString.ToLower();
            roleQuery = roleQuery.Where(element =>
                element.Name.ToLower().Contains(s)
            );
        }

        var totalItems = await roleQuery.CountAsync();

        var pagedData = await roleQuery
                                .Skip(state.Page * state.PageSize)
                                .Take(state.PageSize)
                                .ToListAsync();

        return new TableData<Role>()
            {
                TotalItems = totalItems,
                Items = pagedData
            };
    }
    private async void OnSearch(string text)
    {
        if (!string.IsNullOrEmpty(text))
        {
            searchString = text;
            await table.ReloadServerData();
        }
    }
    private async Task OpenDialogAsync(Role? role = null)
    {
        var options = new DialogOptions { BackdropClick = false, FullWidth = true };
        var parameters = new DialogParameters { ["Role"] = role ,["Table"] = table};
        await Dialog.ShowAsync<CreateRoleDialog>(role == null ? "New Role" : "Edit Role", options: options, parameters: parameters);
        await table.ReloadServerData();
    }
    private async Task SwitchActivation(Role role, bool IsActive)
    {
        if (role != null)
        {
            role.IsActive = IsActive;
            await RoleManager.UpdateAsync(role);
            await UnitOfWork.SaveChangesAsync();

            await table.ReloadServerData();
            StateHasChanged();
        }
    }
}
