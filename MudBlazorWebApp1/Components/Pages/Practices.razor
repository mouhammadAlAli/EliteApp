@page "/Practices"
@attribute [Authorize(Roles = AppConsts.UserConsts.AdminRole)]
@inject IDialogService Dialog
@inject UserManager<User> UserManager
@inject ApplicationDbContext Context

<MudDataGrid T="Practice" ServerData="(state) => ServerReload(state)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Practices</MudText>
        <MudSpacer />
        @* <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start" *@
        @*               AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField> *@
        <MudSpacer />
        <MudFab OnClick="@(() => OpenDialogAsync())" Label="New Practices" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Surface" IconSize="Size.Large" Size="Size.Medium" />
    </ToolBarContent>
    <Columns>
        <HierarchyColumn T="Practice"  />
        <PropertyColumn Property="x => x.Id" />
        <PropertyColumn Property="x => x.Name" />
        <PropertyColumn Property="x => x.Guid" />
        <TemplateColumn>
            <CellTemplate>
                <MudStack Row>
                    @* <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary">Hire</MudButton> *@
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" OnClick="@(() => OpenDialogAsync(@context.Item))" />
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <ChildRowContent>
 <MudPaper Class="mud-elevation-2 pa-4" Style="border-left: 4px solid; border-radius: 8px;">
            <MudToolBar>
                <MudFab OnClick="@(() => OpenDialogAsync(context.Item.Id))" Label="New Doctor" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Surface" IconSize="Size.Small" Size="Size.Small" />
                <MudSpacer />
                <MudIconButton OnClick="()=>AddSelectedToPractice(context.Item.Id)" Disabled="@(!selectedUsers.Any())" Class="mt-5 mr-5" Color="Color.Primary" Icon="@Icons.Material.Filled.Add">Add</MudIconButton>
                <MudSelect Class="mt-4" T="User" MultiSelection="true" HelperText="" @bind-SelectedValues="selectedUsers" MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))" Label="Available Doctors" AdornmentIcon="@Icons.Material.Filled.Search">
                    @foreach (var user in AvailableDoctors)
                    {
                        <MudSelectItem T="User" Value="@user">@($"{user.FirstName} {user.LastName}")</MudSelectItem>
                    }
                </MudSelect>
            </MudToolBar>
            @if (@context.Item.Doctors.Any())
            {
                <MudTable Items="@context.Item.Doctors.ToList()" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
                    <HeaderContent>
                        <MudTh>Id</MudTh>
                        <MudTh>First Name</MudTh>
                        <MudTh>Last Name</MudTh>
                        <MudTh>Email</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate Context="doctorRow">
                        <MudTd DataLabel="Id">@doctorRow.Id</MudTd>
                        <MudTd DataLabel="First Name">@doctorRow.FirstName</MudTd>
                        <MudTd DataLabel="Last Name">@doctorRow.LastName</MudTd>
                        <MudTd DataLabel="Last Name">@doctorRow.Email</MudTd>
                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => DeleteAsync(doctorRow)" />
                        </MudTd>
                    </RowTemplate>
                    <NoRecordsContent>
                        <MudText>No Doctors yet</MudText>
                    </NoRecordsContent>
                </MudTable>
            }
 </MudPaper>
            
    </ChildRowContent>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudDataGridPager T="Practice" />
    </PagerContent>
</MudDataGrid>

@code {
    private List<User> AvailableDoctors = new();
    private IEnumerable<User> selectedUsers = new List<User>();

    protected override async Task OnInitializedAsync()
    {
        var list = await UserManager.GetUsersInRoleAsync(AppConsts.UserConsts.DoctorRole);
        AvailableDoctors = list.Where(x => x.PracticeId == null).ToList();
    }

    private string GetMultiSelectionText(List<string> selectedValues)
    {
        return $"{selectedValues.Count} users {(selectedValues.Count > 1 ? "s have" : " has")} been selected";
    }

    private async Task<GridData<Practice>> ServerReload(GridState<Practice> state)
    {
        var query = Context.Practices.AsQueryable();

        var totalItems = await query.CountAsync();

        var pagedData = await query
                                .Skip(state.Page * state.PageSize)
                                .Take(state.PageSize).Include(x=>x.Doctors)
                                .ToListAsync();

        return new GridData<Practice>()
            {
                TotalItems = totalItems,
                Items = pagedData
            };
    }
    private async Task OpenDialogAsync(Practice? practice = null)
    {
        var options = new DialogOptions { BackdropClick = false, FullWidth = true };
        var parameters = new DialogParameters { ["Practice"] = practice };
        await Dialog.ShowAsync<CreatePracticeDialog>(practice == null ? "New Practice" : "Edit Practice", options: options, parameters: parameters);
        // await table.ReloadServerData();
    }
    private async Task OpenDialogAsync(int practiceId)
    {
        var options = new DialogOptions { BackdropClick = false, FullWidth = true };
        var parameters = new DialogParameters { ["PracticeId"] = practiceId };
        await Dialog.ShowAsync<AddDoctorToPracticeDialog>("Add Doctor", options: options, parameters: parameters);
        // await table.ReloadServerData();
    }
    private async Task DeleteAsync(User user)
    {
        user.PracticeId = null;
        await UserManager.UpdateAsync(user);
        StateHasChanged();
    }
    private async Task AddSelectedToPractice(int practiceId)
    {
        foreach(var doctor in selectedUsers)
        {
            doctor.PracticeId = practiceId;
        }
        Context.UpdateRange(selectedUsers);
        await Context.SaveChangesAsync();
        selectedUsers = new List<User>();
        var list = await UserManager.GetUsersInRoleAsync(AppConsts.UserConsts.DoctorRole);
        AvailableDoctors = list.Where(x => x.PracticeId == null).ToList();
        StateHasChanged();
    }
}