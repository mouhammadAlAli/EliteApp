@page "/Practices"
@attribute [Authorize(Roles = AppConsts.UserConsts.AdminRole)]
@inject IDialogService Dialog
@inject UserManager<User> UserManager
@inject ApplicationDbContext Context

<MudDataGrid T="Practice" @ref="table" ServerData="(state) => ServerReload(state)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Practices</MudText>
        <MudSpacer />
        <MudSpacer />
        <MudFab OnClick="@(() => OpenDialogAsync())" Label="New Practices" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Surface" IconSize="Size.Large" Size="Size.Medium" />
    </ToolBarContent>
    <Columns>
        <HierarchyColumn T="Practice"  />
        <PropertyColumn Property="x => x.Id" />
        <PropertyColumn Property="x => x.Name" />
        <PropertyColumn Property="x => x.Guid" />
        <TemplateColumn>
            <CellTemplate>
                <MudStack Row>
                    @* <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary">Hire</MudButton> *@
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" OnClick="@(() => OpenDialogAsync(@context.Item))" />
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <ChildRowContent>
 <MudPaper Class="mud-elevation-2 pa-4" Style="border-left: 4px solid; border-radius: 8px;">
            <MudToolBar>
                <MudFab OnClick="@(() => OpenDialogAsync(context.Item.Guid))" Label="New Doctor" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Surface" IconSize="Size.Small" Size="Size.Small" />
                <MudSpacer />
            </MudToolBar>
            @if(context.Item.Guid.HasValue){
                @if (GetDoctorsByPractice(context.Item.Guid.Value).Any())
                {
                    <MudTable Items="@GetDoctorsByPractice(context.Item.Guid.Value)" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
                        <HeaderContent>
                            <MudTh>Id</MudTh>
                            <MudTh>First Name</MudTh>
                            <MudTh>Last Name</MudTh>
                            <MudTh>Email</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="doctorRow">
                            <MudTd DataLabel="Id">@doctorRow.Id</MudTd>
                            <MudTd DataLabel="First Name">@doctorRow.FirstName</MudTd>
                            <MudTd DataLabel="Last Name">@doctorRow.LastName</MudTd>
                            <MudTd DataLabel="Last Name">@doctorRow.Email</MudTd>
                            <MudTd>
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => DeleteAsync(doctorRow)" />
                            </MudTd>
                        </RowTemplate>
                        <NoRecordsContent>
                            <MudText>No Doctors yet</MudText>
                        </NoRecordsContent>
                    </MudTable>
                }
            }
        </MudPaper>

    </ChildRowContent>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudDataGridPager T="Practice" />
    </PagerContent>
</MudDataGrid>

@code {
    private MudDataGrid<Practice> table;
    private List<User> AvailableDoctors = new();
    private List<User> AllDoctors = new();
    private IEnumerable<User> selectedUsers = new List<User>();

    protected override async Task OnInitializedAsync()
    {
        var list = await UserManager.GetUsersInRoleAsync(AppConsts.UserConsts.DoctorRole);
        AllDoctors = list.ToList();
        AvailableDoctors = list.Where(x => x.PracticeGuid == null).ToList();
    }

    private string GetMultiSelectionText(List<string> selectedValues)
    {
        return $"{selectedValues.Count} users {(selectedValues.Count > 1 ? "s have" : " has")} been selected";
    }

    private async Task<GridData<Practice>> ServerReload(GridState<Practice> state)
    {
        var query = Context.Practices.AsQueryable();

        var totalItems = await query.CountAsync();

        var pagedData = await query
                                .Skip(state.Page * state.PageSize)
                                .Take(state.PageSize)
                                .ToListAsync();

        return new GridData<Practice>()
            {
                TotalItems = totalItems,
                Items = pagedData
            };
    }

    private async Task OpenDialogAsync(Practice? practice = null)
    {
        var options = new DialogOptions { BackdropClick = false, FullWidth = true };
        var parameters = new DialogParameters { ["Practice"] = practice,["Table"] = table };
        await Dialog.ShowAsync<CreatePracticeDialog>(practice == null ? "New Practice" : "Edit Practice", options: options, parameters: parameters);
        // await table.ReloadServerData();
        // StateHasChanged();
        // await table.ReloadServerData();
    }
    private async Task OpenDialogAsync(Guid? practiceGuid)
    {
        if(practiceGuid.HasValue)
        {
            var options = new DialogOptions { BackdropClick = false, FullWidth = true };
            var parameters = new DialogParameters { ["PracticeGuid"] = practiceGuid, ["Table"] = table };
            await Dialog.ShowAsync<AddDoctorToPracticeDialog>("Add Doctor", options: options, parameters: parameters);
        }
    }
    private async Task DeleteAsync(User user)
    {
        user.PracticeGuid = null;
        await UserManager.DeleteAsync(user);
        StateHasChanged();
        await table.ReloadServerData();
    }
    private List<User> GetDoctorsByPractice(Guid? practiceGuid)
    {
        return AllDoctors
            .Where(u => u.PracticeGuid.HasValue && u.PracticeGuid == practiceGuid)
            .ToList();
    }
}