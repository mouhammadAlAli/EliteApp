@page "/Teams"
@inject ApplicationDbContext ApplicationContext
@inject IDialogService DialogService

@attribute [Authorize(Roles = AppConsts.UserConsts.AdminRole)]
<MudTable ServerData="ServerReload" Dense="true" Hover="true" Bordered="false" @ref=table>
    <ToolBarContent>
        <MudText Typo="Typo.h6">Teams</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudSpacer />
        <MudFab OnClick="@(() => OpenDialogAsync())" Label="New Team" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Surface" IconSize="Size.Large" Size="Size.Medium" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Leader Name</MudTh>
        <MudTh>Members Count</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Leader Name">@context.Leader.FirstName @context.Leader.LastName</MudTd>
        <MudTd DataLabel="Members Count">@context.Members.Count() </MudTd>
        <MudTd DataLabel="Actions">
            <MudToolBar>
                <MudIconButton OnClick="@(() => OpenDialogAsync(context))" Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" />
            </MudToolBar>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>




@code {
    private string searchString = "";
    private MudTable<Team> table;
    private readonly DialogOptions _backdropClick = new() { BackdropClick = false, FullWidth = true };

    private async Task<TableData<Team>> ServerReload(TableState state, CancellationToken token)
    {
        var teamsQuery = ApplicationContext.Teams.AsQueryable();

        if (!string.IsNullOrWhiteSpace(searchString))
        {
            var s = searchString.ToLower();
            teamsQuery = teamsQuery.Where(element =>
                element.Name.ToLower().Contains(s)
            );
        }
        var totalItems = await teamsQuery.CountAsync();

        var pagedData = await teamsQuery
                                .Skip(state.Page * state.PageSize)
                                .Take(state.PageSize).Include(x=>x.Leader).Include(x=>x.Members)
                                .ToListAsync();

        return new TableData<Team>()
        {
                TotalItems = totalItems,
                Items = pagedData
        };
    }
    private async void OnSearch(string text)
    {
        if (!string.IsNullOrEmpty(text))
        {
            searchString = text;
            await table.ReloadServerData();
        }
    }
    private async Task OpenDialogAsync(Team? team = null)
    {
        try
        {
            var options = new DialogOptions
                {
                    CloseOnEscapeKey = true,
                    FullWidth = true,
                    CloseButton = true,
                    BackdropClick = false
                };
            var parameters = new DialogParameters { ["Team"] = team, ["Table"] = table };

            var dialog = await DialogService.ShowAsync<CreateTeamDialog>( team == null ?"Create New Team" : "Edit Team", options: options, parameters:parameters);

            var result = await dialog.Result;
            await table.ReloadServerData();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred: {ex.Message}");
        }
    }
   
}


