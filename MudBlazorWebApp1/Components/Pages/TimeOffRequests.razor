@page "/TimeOffRequests"
@using MudBlazorWebApp1.Data.Enums
@using System.Security.Claims
@inject ApplicationDbContext Context
@inject IDialogService Dialog
@inject IUnitOfWork UnitOfWork
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<User> UserManager

@attribute [Authorize]

<MudTable ServerData="ServerReload" Dense="true" Hover="true" Bordered="false" @ref=table>
    <ToolBarContent>
        <MudText Typo="Typo.h6">Time Off Requests</MudText>
        <MudSpacer />
        <MudSelect T="TimeOffCategory?" Label="Category" MultiSelection="false" @bind-Value="Category">
            @foreach (var category in Enum.GetValues<TimeOffCategory>())
            {
                <MudSelectItem T="TimeOffCategory?" Value="@category">@category.ToString()</MudSelectItem>
            }
        </MudSelect>
        <MudSpacer />
        <MudSelect T="RequestTimeOffStatus?" Label="Status" MultiSelection="false" @bind-Value="Status">
            @foreach (var status in Enum.GetValues<RequestTimeOffStatus>())
            {
                <MudSelectItem T="RequestTimeOffStatus?" Value="@status">@status.ToString()</MudSelectItem>
            }
        </MudSelect>
        <MudSpacer />
        <MudIconButton OnClick="OnFilter" Icon="@Icons.Material.Filled.FilterList" />
    </ToolBarContent>

    <HeaderContent>
        @if (isAdmin)
        {
            <MudTh>Id</MudTh>
            <MudTh>User</MudTh>
        }
        <MudTh>From</MudTh>
        <MudTh>To</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Created At</MudTh>
        @if (isAdmin)
        {
            <MudTh>Change Status</MudTh>
        }
    </HeaderContent>

    <RowTemplate>
        @if (isAdmin)
        {
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="User">@($"{context.User.FirstName} {context.User.LastName}")</MudTd>
        }
        <MudTd DataLabel="From">@context.From</MudTd>
        <MudTd DataLabel="To">@context.To</MudTd>
        <MudTd DataLabel="Status">
            <MudText Color="@(StatusColor(context.Status))">@context.Status.ToString()</MudText>
        </MudTd>
        <MudTd DataLabel="Created At">@context.CreatedAt</MudTd>
        @if (isAdmin)
        {
            <MudTd DataLabel="ChangeStatus">
                <MudToolBar>
                    <MudSelect T="RequestTimeOffStatus?" Label="Status" MultiSelection="false"
                    @bind-Value="@RowStatuses[context.Id]">
                        @foreach (var status in Enum.GetValues<RequestTimeOffStatus>())
                        {
                            if (context.Status == status || status == RequestTimeOffStatus.Pending)
                                continue;
                            <MudSelectItem T="RequestTimeOffStatus?" Value="@status">@status.ToString()</MudSelectItem>
                        }
                    </MudSelect>

                    <MudIconButton Icon="@Icons.Material.Outlined.SwapHoriz"
                    OnClick="() => ChangeStatus(context, RowStatuses[context.Id].Value)"
                    Color="Color.Primary" />
                </MudToolBar>
            </MudTd>
        }
    </RowTemplate>

    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>

    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>

    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private Dictionary<int, RequestTimeOffStatus?> RowStatuses = new();
    private TimeOffCategory? Category;
    private RequestTimeOffStatus? Status;
    private MudTable<TimeOffRequest> table;
    private bool isAdmin;
    private int UserId;

    private Color StatusColor(RequestTimeOffStatus status)
    {
        return status switch
        {
            RequestTimeOffStatus.Approved => Color.Success,
            RequestTimeOffStatus.Rejected => Color.Error,
            _ => Color.Surface,
        };
    }
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            var roles = authState.User.FindAll(ClaimTypes.Role).Select(c => c.Value).ToList();
            isAdmin = roles.Contains(AppConsts.UserConsts.AdminRole);
            var appUser = await UserManager.GetUserAsync(authState.User);
            UserId = appUser.Id;
        }
    }
    private async Task<TableData<TimeOffRequest>> ServerReload(TableState state, CancellationToken token)
    {
        var query = Context.TimeOffRequests.AsQueryable();
        query = query.OrderByDescending(x => x.Id);
        if (!isAdmin)
            query = query.Where(x => x.UserId == UserId);
        if (Category.HasValue)
            query = query.Where(x => x.TimeOffCategory == Category);

        if (Status.HasValue)
            query = query.Where(x => x.Status == Status);

        var totalItems = await query.CountAsync();

        var pagedData = await query
            .Skip(state.Page * state.PageSize)
            .Take(state.PageSize)
            .Include(x => x.User)
            .ToListAsync();

        RowStatuses = pagedData.ToDictionary(x => x.Id, x => (RequestTimeOffStatus?)null);

        return new TableData<TimeOffRequest>()
            {
                TotalItems = totalItems,
                Items = pagedData
            };
    }

    private async void OnFilter()
    {
        await table.ReloadServerData();
    }

    private async Task ChangeStatus(TimeOffRequest request, RequestTimeOffStatus? status)
    {
        if (request != null && status.HasValue)
        {
            request.Status = status.Value;
            Context.Update(request);
            await UnitOfWork.SaveChangesAsync();
            await table.ReloadServerData();
            StateHasChanged();
        }
    }
}
