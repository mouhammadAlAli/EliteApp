@page "/"
@attribute [Authorize]
@inject ICurrentUserService CurrentUser
@inject ApplicationDbContext _context
@inject UserManager<User> UserManager
@inject IAttachmentService AttachmentService
@inject NavigationManager NavigationManager
<PageTitle>Home</PageTitle>

<MudContainer Class="px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12" sm="12" md="12">
            <MudCard Outlined="false">
                @if (User == null || string.IsNullOrEmpty(User.Email))
                {
                    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
                }
                else
                {
                    <MudCardHeader>
                        <CardHeaderAvatar>
                            @if (!string.IsNullOrEmpty(ProfileBase64))
                            {
                                <MudAvatar>
                                    <MudImage Src=@ProfileBase64 />
                                </MudAvatar>
                            }
                            else
                            {
                                <MudAvatar Color="Color.Secondary">@User.FirstName.First()</MudAvatar>
                            }
                        </CardHeaderAvatar>
                        <CardHeaderContent>
                            <MudText Typo="Typo.body1">Hello, @User.FirstName @User.LastName</MudText>
                            <MudText Typo="Typo.body2">@Role</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                }
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudGrid>
                <MudItem xs="12">
                    <MyTime CurrentWorkingPeriod="@CurrentWorkingPeriod" UserId="@User.Id" PeriodsThisWeek="@UserWorkingPeriodsThisWeek" />
                </MudItem>
                <MudItem xs="12">
                    <TimeOff UserId="@User.Id"/>
                </MudItem>
                <MudItem xs="12">
                    <MyStuff />
                </MudItem>
            </MudGrid>
        </MudItem>
        @* right side *@
        <MudItem xs="12" sm="6">
            <MyAnnouncements  Announcements="@Announcements"/>
            <MyTeam Team="TeamMembers" User="User" />
        </MudItem>
        <MudItem xs="12" sm="6" md="4">

        </MudItem>
        @* <MudItem xs="12" sm="6" md="4"> *@
        @*     <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;"> *@
        @*         2 *@
        @*     </MudPaper> *@
        @* </MudItem> *@
        @* <MudItem xs="12" sm="12" md="4"> *@
        @*     <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;"> *@
        @*         3 *@
        @*     </MudPaper> *@
        @* </MudItem> *@
    </MudGrid>
</MudContainer>

@code{
    private User User { get; set; } = new();
    private Attachment ProfilePhoto = new();
    string Role;
    private UserWorkingPeriod? CurrentWorkingPeriod { get; set; } = new();
    private List<UserWorkingPeriod> UserWorkingPeriodsThisWeek { get; set; } = new();
    private Dictionary<Announcement,Attachment> Announcements { get; set; } = new();
    private Dictionary<User,Attachment> TeamMembers { get; set; } = new();
    private string ProfileBase64;
    protected override async Task OnInitializedAsync()
    {
        User = await CurrentUser.GetCurrentUserAsync();
        var roles = await UserManager.GetRolesAsync(User);
        Role = roles.First();

        if (Role == AppConsts.UserConsts.DoctorRole)
        {
            NavigationManager.NavigateTo("/practicedashboard");
        }

        ProfilePhoto = await AttachmentService.GetAttachmentByRefIdAndRefTypeAsync(User.Id, Data.Enums.AttachmentRefType.Profile);
        if(ProfilePhoto != null)
        {
            ProfileBase64 = AttachmentService.GetImageUrl(ProfilePhoto);
        }
        var today = DateTime.UtcNow.Date;
        var startOfWeek = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek);
        var endOfWeek = startOfWeek.AddDays(7).AddSeconds(-1);

        UserWorkingPeriodsThisWeek = await _context.UserWorkingPeriods
            .Where(wp => wp.Date >= startOfWeek && wp.Date <= endOfWeek && wp.UserId == User.Id)
            .OrderBy(wp => wp.Date)
            .ToListAsync();
        CurrentWorkingPeriod = await _context.UserWorkingPeriods
             .Where(wp => wp.UserId == User.Id)
             .OrderByDescending(wp => wp.Id)
             .FirstOrDefaultAsync();

        if (User.TeamId.HasValue)
        {
            var announcementsList = await _context.Announcements.Where(a => a.TeamId == User.TeamId || a.TeamId == null).OrderByDescending(wp => wp.Id).Take(20).ToListAsync();
            foreach (var x in announcementsList){
                var attachment = await  AttachmentService.GetAttachmentByRefIdAndRefTypeAsync(x.Id, Data.Enums.AttachmentRefType.Announcement);
                Announcements.Add(x, attachment);
            }
        }
        else{
            var announcementsList = await _context.Announcements.Where(x => x.TeamId == null).OrderByDescending(wp => wp.Id).Take(20).ToListAsync();
            foreach (var x in announcementsList)
            {
                var attachment = await AttachmentService.GetAttachmentByRefIdAndRefTypeAsync(x.Id, Data.Enums.AttachmentRefType.Announcement);
                Announcements.Add(x, attachment);
            }   
        }
        var teamList = await UserManager.Users
            .Where(u => u.TeamId == User.TeamId)
            .Include(x => x.Team)
            .ToListAsync();
        foreach (var user in teamList)
        {
            var attachment = await AttachmentService.GetAttachmentByRefIdAndRefTypeAsync(user.Id, Data.Enums.AttachmentRefType.Profile);
            TeamMembers.Add(user ,attachment);
        }
    }
}
