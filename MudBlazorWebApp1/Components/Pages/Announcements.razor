@page "/Announcements"
@inject IDialogService Dialog
@inject ApplicationDbContext ApplicationDbContext
@attribute [Authorize(Roles = AppConsts.UserConsts.AdminRole)]

<MudTable ServerData="ServerReload" Dense="true" Hover="true" Bordered="false" @ref=table>
    <ToolBarContent>
        <MudText Typo="Typo.h6">Announcements</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudSpacer />
        <MudFab OnClick="@(() => OpenDialogAsync())" Label="New Announcement" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Surface" IconSize="Size.Large" Size="Size.Medium" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Team</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Description">@context.Title</MudTd>
        <MudTd DataLabel="Team">@(context.Team != null ? context.Team.Name :  "All")</MudTd>
        <MudTd DataLabel="Actions">
            <MudToolBar>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" />
            </MudToolBar>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>




@code {
    private string searchString = "";
    public bool Basic_Switch1 { get; set; } = false;
    private MudTable<Announcement> table;
    private async Task<TableData<Announcement>> ServerReload(TableState state, CancellationToken token)
    {
        var query = ApplicationDbContext.Announcements.AsQueryable();

        if (!string.IsNullOrWhiteSpace(searchString))
        {
            var s = searchString.ToLower();
            query = query.Where(element =>
                element.Title.ToLower().Contains(s)
            );
        }

        var totalItems = await query.CountAsync();

        // Apply pagination: skip rows for the current page and take the page size
        var pagedData = await query
                                .Skip(state.Page * state.PageSize)
                                .Take(state.PageSize)
                                .ToListAsync();

        return new TableData<Announcement>()
            {
                TotalItems = totalItems,
                Items = pagedData
            };
    }
    private async void OnSearch(string text)
    {
        if (!string.IsNullOrEmpty(text))
        {
            searchString = text;
            await table.ReloadServerData();
        }
    }
    private async Task OpenDialogAsync()
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                FullWidth = true,
                CloseButton = true,
                BackdropClick = false
            };
        await Dialog.ShowAsync<CreateAnnouncementDialog>("New Announcement", options);
        StateHasChanged();
        await table.ReloadServerData();
    }
}
