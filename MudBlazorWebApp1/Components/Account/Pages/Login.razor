@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using MudBlazorWebApp1.Data
@using System.Security.Claims

@inject SignInManager<User> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject AuthenticationStateProvider AuthStateProvider

@layout LoginLayout

<PageTitle>Log in</PageTitle>
<MudCard Style="max-width: 500px; width: 100%;" Elevation="3">
    <MudCardHeader Class="d-flex flex-column">
        <MudText Typo="Typo.h4" GutterBottom="true">Sign in to Elite</MudText>

        <MudText Style="max-width: 350px;" Align="Align.Center" GutterBottom="true" Typo="Typo.body2">
            Welcome to Elite, please enter your local account details below to using the app.
        </MudText>
    </MudCardHeader>


    <MudCardContent Class="d-flex flex-column align-center">
    <MudItem Class="pa-3">
        <StatusMessage Message="@errorMessage" />
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />

            <MudGrid >
                <MudItem md="12" >
                    <MudStaticTextField For="@(() => Input.Email)" @bind-Value="Input.Email"
                                        Label="Email" Placeholder="name@example.com" Margin="Margin.Dense" Variant="Variant.Outlined"
                                        UserAttributes="@(new() { { "autocomplete", "username" }, { "aria-required", "true" } } )" />
                </MudItem>

                <MudItem md="12" >
                    <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password"
                                        Label="Password" InputType="InputType.Password" Placeholder="password" Margin="Margin.Dense" Variant="Variant.Outlined"
                                        UserAttributes="@(new() { { "autocomplete", "current-password" }, { "aria-required", "true" } } )" />
                </MudItem>

                <MudItem md="12" Class="d-flex align-center">
                        <MudStaticCheckBox Size="Size.Small" Color="Color.Primary" Dense="true" For="@(() => Input.RememberMe)" @bind-Value="Input.RememberMe">
                            <span style="font-size: 0.75rem;">Remember me</span
                        </MudStaticCheckBox>
                        <MudSpacer />
                        <MudLink Typo="Typo.caption" Href="Account/ForgotPassword">Forgot your password?</MudLink>
                        @* <MudLink Href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</MudLink><br /> *@
                        @* <MudLink Href="Account/ResendEmailConfirmation">Resend email confirmation</MudLink> *@
                </MudItem>

                <MudItem md="12" >
                    <MudStaticButton Size="Size.Large" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" FormAction="FormAction.Submit">Log in</MudStaticButton>
                </MudItem>

            </MudGrid>
        </EditForm>

        @* <MudGrid Class="mt-4">
            <MudItem md="12">
                <MudLink Href="Account/ForgotPassword">Forgot your password?</MudLink>
                <MudLink Href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</MudLink><br />
                <MudLink Href="Account/ResendEmailConfirmation">Resend email confirmation</MudLink>
            </MudItem>
        </MudGrid> *@
    </MudItem>
    @* <MudItem md="6"> *@
    @*     <MudText GutterBottom="true" Typo="Typo.body1">Use another service to log in.</MudText> *@

    @*     <ExternalLoginPicker /> *@
    @* </MudItem> *@
  </MudCardContent>
</MudCard>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");

            var user = SignInManager.Context.User;
            if (user.Identity?.IsAuthenticated == true && user.IsInRole(AppConsts.UserConsts.DoctorRole))
            {
                ReturnUrl = "practicedashboard";
            }
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
